package cn.dreeam.sunbox.benchmarks.jmh;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Level;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.Setup;
import org.openjdk.jmh.annotations.State;

import java.util.List;
import java.util.concurrent.TimeUnit;

/*
Estimate running time: ~3mins
Target patch:
- Cache-BlockStatePairKey-hash.patch
- Cache-ShapePairKey-hash.patch

Generated using ChatGPT
*/
@BenchmarkMode(Mode.AverageTime)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@State(Scope.Thread)
public class RecordHashCode {

    private ComplexPojoClass pojoInstance;
    private ComplexRecordClass recordInstance;

    @Setup(Level.Iteration)
    public void setup() {
        pojoInstance = new ComplexPojoClass(
                123, "benchmark", List.of("one", "two", "three"), 42.0);
        recordInstance = new ComplexRecordClass(
                123, "benchmark", List.of("one", "two", "three"), 42.0);
    }

    @Benchmark
    public int hashCodePojo() {
        return pojoInstance.hashCode();
    }

    @Benchmark
    public int hashCodePojoCached() {
        return pojoInstance.hashCodeCached();
    }

    @Benchmark
    public int hashCodeRecord() {
        return recordInstance.hashCode();
    }

    // Normal class
    public static class ComplexPojoClass {
        private final int id;
        private final String name;
        private final List<String> tags;
        private final double value;
        private final int hash;

        public ComplexPojoClass(int id, String name, List<String> tags, double value) {
            this.id = id;
            this.name = name;
            this.tags = tags;
            this.value = value;

            int result = Integer.hashCode(id);
            result = 31 * result + (name != null ? name.hashCode() : 0);
            result = 31 * result + (tags != null ? tags.hashCode() : 0);
            result = 31 * result + Double.hashCode(value);
            this.hash = result;
        }

        @Override
        public int hashCode() {
            int result = Integer.hashCode(id);
            result = 31 * result + (name != null ? name.hashCode() : 0);
            result = 31 * result + (tags != null ? tags.hashCode() : 0);
            result = 31 * result + Double.hashCode(value);
            return result;
        }

        public int hashCodeCached() {
            return hash;
        }
    }

    // Record
    public record ComplexRecordClass(
            int id,
            String name,
            List<String> tags,
            double value
    ) {
        // Auto generated by compiler
    }
}
